# we are using a multi-container in a different pod deployment
# reqirements:
# 1. Node.js application container 
# 2. MongoDB container
# 3. Both containers should be in the different pod


# deployment 1: ------------------------------------------
# create a deployment for Node.js application in a different pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nodedb-app   # Unique name for the Deployment
spec:
  replicas: 2      # 2 Pods at all times
  selector:
    matchLabels:
      app: nodedb-app   # Match the app label
  template:
    metadata:
      labels:
        app: nodedb-app # Pod label must match selector
    spec:
      containers:
        - name: nodedb-app
          image: philippaul/node-mongo-db:04  # Replace this
        - name: mongodb
          image: mongo:latest  # MongoDB container
          
# Note: The Node.js application should be configured to connect to MongoDB using the service name 'mongodb' as the hostname.
---
# service 1: ------------------------------------------
# create a service to expose the Node.js application
apiVersion: v1  
kind: Service
metadata:
  name: my-nodedb-app-service
spec:
  selector:
    app: nodedb-app   # Match the app label
  ports:
    - name: http
      port: 8080       # Port on which the service will be exposed
      targetPort: 3000 # Port on the container to forward traffic to
  type: NodePort       # Expose the service on a port on each Node in the cluster


---

# deployment 2: ------------------------------------------
# create a deployment for MongoDB in a different pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nodedb-app   # Unique name for the Deployment
spec:
  replicas: 2      # 2 Pods at all times
  selector:
    matchLabels:
      app: nodedb-app   # Match the app label
  template:
    metadata:
      labels:
        app: nodedb-app # Pod label must match selector
    spec:
      containers:
        - name: mongodb
          image: mongo:latest  # MongoDB container


# create a service to expose the MongoDB


